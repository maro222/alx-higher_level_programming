>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided([[1, 2.3, 3], [4.1, 5, 6]], 2)
[[0.5, 1.15, 1.5], [2.05, 2.5, 3.0]]

>>> matrix_divided([[1, 2.3, -3], [4.0, -5, 6]], 2)
[[0.5, 1.15, -1.5], [2.0, -2.5, 3.0]]

>>> matrix_divided([[1, 2.3, -3], [4.0, -5, 6]], -1)
[[-1.0, -2.3, 3.0], [-4.0, 5.0, -6.0]]

>>> matrix_divided([[1, 2.3, -3]], 3)
[[0.33, 0.77, -1.0]]

>>> matrix_divided([[]], 2)
[[]]



>>> matrix_divided([[1, 2.3, -3], [4.0, -5, 6]], 0)
Traceback (most recent call last):
    ...
    raise ZeroDivisionError("division by zero")
ZeroDivisionError: division by zero

>>> matrix_divided([[1, 2.3, -3], [4.0, -5, 6, 8]], 3)
Traceback (most recent call last):
    ...
    raise TypeErrorg"Each row of the matrix must have the same size")
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2.3, 3], [4.1, True, 6]], 2)
Traceback (most recent call last):
    ...
    raise TypeError("matrix must be a matrix")
TypeError: matrix must be a matrix(list of lists) of integers/floats

>>> matrix_divided([[1, 2.3, -3], [4.0, -5, "School"]], 2)
Traceback (most recent call last):
    ...
    raise TypeError("matrix must be a matrix")
TypeError: matrix must be a matrix(list of lists) of integers/floats

>>> matrix_divided([[1, 2, -3], [2, 4, 111]], "School")
Traceback (most recent call last):
    ...
    raise TypeError("div must be a number")
TypeError: div must be a number
